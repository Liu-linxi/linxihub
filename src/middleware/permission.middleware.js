const { OPERATION_NOT_ALLOWED, RESOURCE_NOT_FOUND } = require("../config/error");
const permissionService = require("../service/permission.service");

/**
 * Â¶ÇÊûúËøôÈáå‰ΩøÁî®Âä®ÊÄÅÁöÑÊìç‰ΩúÁöÑËØùÈÇ£‰πàrouter‰∏≠ÁöÑË∑ØÁî±Êìç‰Ωú"/:momentId"ËøôÈáåÂêçÂ≠óÂøÖÈ°ª‰∏•Ê†ºËßÑËåÉÊ≥®ÊÑèÊìç‰ΩúÊ†áÊòéÈ©ºÂ≥∞Id
 */
const verifyPermission = async (ctx, next) => {
  const { id } = ctx.user;
  const keyName = Object.keys(ctx.params)[0];
  console.log("üöÄ ~ verifyPermission ~ ctx.params:", ctx.params)
  const resouceId = ctx.params[keyName];
  const resouceName = keyName.replace('Id', '');
  const isExist = await permissionService.findResouce(resouceName, resouceId);
  if (!isExist) {
    return ctx.app.emit('error', RESOURCE_NOT_FOUND, ctx)
  }
  const isPermission = await permissionService.checkResouce(resouceName, resouceId, id)
  if (!isPermission) {
    return ctx.app.emit('error', OPERATION_NOT_ALLOWED, ctx)
  }
  await next()
}

// Â¶ÇÊûúËøôÈáå‰ΩøÁî®Âä®ÊÄÅÁöÑÊìç‰ΩúÁöÑËØùÈÇ£‰πà‰º†ÂèÇÊï∞"momentId"ËøôÈáåÂêçÂ≠óÂøÖÈ°ª‰∏•Ê†ºËßÑËåÉÊ≥®ÊÑèÊìç‰ΩúÊ†áÊòéÈ©ºÂ≥∞Id
const verifyResouce = function (resourceName) {
  return async function (ctx, next) {
    try {
      // Êü•Êâæ‰ª• resourceName ÂºÄÂ§¥„ÄÅ‰ª• Id ÁªìÂ∞æÁöÑÂ≠óÊÆµÔºåÂ¶Ç momentId„ÄÅcommentId
      const keyName = Object.keys(ctx.request.body).find(key =>
        key.startsWith(resourceName) && key.endsWith('Id')
      );

      if (!keyName) {
        return ctx.app.emit('error', RESOURCE_NOT_FOUND, ctx);
      }

      const resourceId = ctx.request.body[keyName];

      // Ë∞ÉÁî® service Â±ÇÊ£ÄÊü•ËµÑÊ∫êÊòØÂê¶Â≠òÂú®
      const isExist = await permissionService.findResouce(resourceName, resourceId);
      if (!isExist) {
        return ctx.app.emit('error', RESOURCE_NOT_FOUND, ctx);
      }

      await next();
    } catch (error) {
      console.error('verifyResource error:', error);
      return ctx.app.emit('error', RESOURCE_NOT_FOUND, ctx);
    }
  }

}

module.exports = {
  verifyPermission,
  verifyResouce
}